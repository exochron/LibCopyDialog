---@diagnostic disable: undefined-global

assert(LibStub, "LibStub is not installed!")

local LibName = "LibCopyDialog"
--@debug@
local MINOR = 9999999
--@end-debug@
--[===[@non-debug@
local MINOR = @project-version@
--@end-non-debug@]===]
local LCD = LibStub:NewLibrary(LibName, MINOR)
if not LCD then return end

local initDialog, defaultLabel

local function SetupLocale(locale)
    local closeLabel = CLOSE
    defaultLabel = "Press CTRL+C to copy"

    -- most translations are generated by AI. So feel free to improve them. :)
    if locale == "enUS" then
        closeLabel = "Close"
    elseif locale == "deDE" then
        defaultLabel = "Drücke STRG+C zum Kopieren"
    elseif locale == "esES" then
        defaultLabel = "Presiona CTRL+C para copiar."
    elseif locale == "esMX" then
        defaultLabel = "Presione CTRL+C para copiar."
    elseif locale == "frFR" then
        defaultLabel = "Appuyez sur CTRL+C pour copier."
    elseif locale == "itIT" then
        defaultLabel = "Premi CTRL+C per copiare."
    elseif locale == "koKR" then
        defaultLabel = "CTRL+C를 눌러 복사하세요."
    elseif locale == "ptBR" then
        defaultLabel = "Pressione CTRL+C para copiar."
    elseif locale == "ruRU" then
        defaultLabel = "Нажмите CTRL+C, чтобы скопировать."
    elseif locale == "zhCN" then
        defaultLabel = "按下 CTRL+C 进行复制。"
    elseif locale == "zhTW" then
        defaultLabel = "按 CTRL+C 複製。"
    end

    initDialog(closeLabel)
end

initDialog = function(closeLabel)

    local dialogIsVisible = false
    StaticPopupDialogs["LIB_COPY_DIALOG"] = {
        text = "%s",
        button1 = closeLabel,
        hasEditBox = true,
        editBoxWidth = 400,
        timeout = 0,
        whileDead = true,
        hideOnEscape = true,
        EditBoxOnEnterPressed = function(editBox)
            editBox:GetParent():Hide()
        end,
        EditBoxOnEscapePressed = function(editBox)
            editBox:GetParent():Hide()
        end,
        OnShow = function(dialog, data)
            dialogIsVisible = true
            local editBox = dialog.editBox or dialog:GetEditBox()

            if not editBox.HookedByLibCopyDialog then
                editBox.HookedByLibCopyDialog = true
                editBox:HookScript("OnKeyDown", function(_, key)
                    if dialogIsVisible and IsControlKeyDown() and key == "C" then
                        C_Timer.After(0.1, function()
                            dialog:Hide()
                        end)
                    end
                end)
            end

            editBox:SetMultiLine(true)
            editBox:SetText(data or "")
            editBox:HighlightText()

            C_Timer.After(0, function()
                -- Proper rect height is only available after showing.
                local _,_,_, height = editBox:GetRect()
                editBox:SetHeight(height)
                editBox:SetPoint("BOTTOM", dialog.Text or dialog.text, "BOTTOM", 0, -height - 8)
                dialog:Resize()
            end)

            -- In classic the editBox doesn't use the TooltipBackdropTemplate yet. so we add it here.
            -- We need it in order to get a dynamic border for the multiline editBox.
            if not editBox.NineSlice and not editBox.layoutType then
                _G[editBox:GetName().."Left"]:Hide()
                _G[editBox:GetName().."Right"]:Hide()
                _G[editBox:GetName().."Mid"]:Hide()

                -- from TooltipBackdropTemplate
                editBox.layoutType = "TooltipDefaultLayout"
                editBox.NineSlice = CreateFrame("Frame", nil, editBox, "NineSlicePanelTemplate")
                editBox.NineSlice:SetFrameLevel(editBox:GetFrameLevel())
                Mixin(editBox, TooltipBackdropTemplateMixin)
                editBox:TooltipBackdropOnLoad()
                editBox:SetTextInsets(5, 5, 5, 5)
            end
        end,
        OnHide = function(dialog)
            dialogIsVisible = false
            -- cleanup
            local editBox = dialog.editBox or dialog:GetEditBox()
            editBox:SetMultiLine(false)
            editBox:SetText("")
            editBox:SetHeight(32)
        end,
    }
end

SetupLocale(GetLocale())

function LCD:Open(copyText, customLabel)
    StaticPopup_Show("LIB_COPY_DIALOG", customLabel or defaultLabel, nil, copyText)
end

--@debug@
function LCD:SetupLocale(locale)
    SetupLocale(locale)
end
--@end-debug@

EventRegistry:RegisterCallback("SetItemRef", function(_, linkData, linkText)
    local _, linkType, copyText = string.split(":", linkData, 3)
    if linkType == LibName then
        LCD:Open(copyText or linkText)
    end
end, LibName)